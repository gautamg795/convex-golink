/*
Convex App - OpenAPI 3.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RequestStoreDefaultArgs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestStoreDefaultArgs{}

// RequestStoreDefaultArgs struct for RequestStoreDefaultArgs
type RequestStoreDefaultArgs struct {
	Link RequestStoreDefaultArgsLink `json:"link"`
	Token string `json:"token"`
}

type _RequestStoreDefaultArgs RequestStoreDefaultArgs

// NewRequestStoreDefaultArgs instantiates a new RequestStoreDefaultArgs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestStoreDefaultArgs(link RequestStoreDefaultArgsLink, token string) *RequestStoreDefaultArgs {
	this := RequestStoreDefaultArgs{}
	this.Link = link
	this.Token = token
	return &this
}

// NewRequestStoreDefaultArgsWithDefaults instantiates a new RequestStoreDefaultArgs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestStoreDefaultArgsWithDefaults() *RequestStoreDefaultArgs {
	this := RequestStoreDefaultArgs{}
	return &this
}

// GetLink returns the Link field value
func (o *RequestStoreDefaultArgs) GetLink() RequestStoreDefaultArgsLink {
	if o == nil {
		var ret RequestStoreDefaultArgsLink
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *RequestStoreDefaultArgs) GetLinkOk() (*RequestStoreDefaultArgsLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *RequestStoreDefaultArgs) SetLink(v RequestStoreDefaultArgsLink) {
	o.Link = v
}

// GetToken returns the Token field value
func (o *RequestStoreDefaultArgs) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *RequestStoreDefaultArgs) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *RequestStoreDefaultArgs) SetToken(v string) {
	o.Token = v
}

func (o RequestStoreDefaultArgs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestStoreDefaultArgs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["link"] = o.Link
	toSerialize["token"] = o.Token
	return toSerialize, nil
}

func (o *RequestStoreDefaultArgs) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"link",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRequestStoreDefaultArgs := _RequestStoreDefaultArgs{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRequestStoreDefaultArgs)

	if err != nil {
		return err
	}

	*o = RequestStoreDefaultArgs(varRequestStoreDefaultArgs)

	return err
}

type NullableRequestStoreDefaultArgs struct {
	value *RequestStoreDefaultArgs
	isSet bool
}

func (v NullableRequestStoreDefaultArgs) Get() *RequestStoreDefaultArgs {
	return v.value
}

func (v *NullableRequestStoreDefaultArgs) Set(val *RequestStoreDefaultArgs) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestStoreDefaultArgs) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestStoreDefaultArgs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestStoreDefaultArgs(val *RequestStoreDefaultArgs) *NullableRequestStoreDefaultArgs {
	return &NullableRequestStoreDefaultArgs{value: val, isSet: true}
}

func (v NullableRequestStoreDefaultArgs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestStoreDefaultArgs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


