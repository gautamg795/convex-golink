/*
Convex App - OpenAPI 3.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RequestClearDefault type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestClearDefault{}

// RequestClearDefault struct for RequestClearDefault
type RequestClearDefault struct {
	Args RequestClearDefaultArgs `json:"args"`
}

type _RequestClearDefault RequestClearDefault

// NewRequestClearDefault instantiates a new RequestClearDefault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestClearDefault(args RequestClearDefaultArgs) *RequestClearDefault {
	this := RequestClearDefault{}
	this.Args = args
	return &this
}

// NewRequestClearDefaultWithDefaults instantiates a new RequestClearDefault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestClearDefaultWithDefaults() *RequestClearDefault {
	this := RequestClearDefault{}
	return &this
}

// GetArgs returns the Args field value
func (o *RequestClearDefault) GetArgs() RequestClearDefaultArgs {
	if o == nil {
		var ret RequestClearDefaultArgs
		return ret
	}

	return o.Args
}

// GetArgsOk returns a tuple with the Args field value
// and a boolean to check if the value has been set.
func (o *RequestClearDefault) GetArgsOk() (*RequestClearDefaultArgs, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Args, true
}

// SetArgs sets field value
func (o *RequestClearDefault) SetArgs(v RequestClearDefaultArgs) {
	o.Args = v
}

func (o RequestClearDefault) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestClearDefault) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["args"] = o.Args
	return toSerialize, nil
}

func (o *RequestClearDefault) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"args",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRequestClearDefault := _RequestClearDefault{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRequestClearDefault)

	if err != nil {
		return err
	}

	*o = RequestClearDefault(varRequestClearDefault)

	return err
}

type NullableRequestClearDefault struct {
	value *RequestClearDefault
	isSet bool
}

func (v NullableRequestClearDefault) Get() *RequestClearDefault {
	return v.value
}

func (v *NullableRequestClearDefault) Set(val *RequestClearDefault) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestClearDefault) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestClearDefault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestClearDefault(val *RequestClearDefault) *NullableRequestClearDefault {
	return &NullableRequestClearDefault{value: val, isSet: true}
}

func (v NullableRequestClearDefault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestClearDefault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


