/*
Convex App - OpenAPI 3.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RequestTestTMutation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestTestTMutation{}

// RequestTestTMutation struct for RequestTestTMutation
type RequestTestTMutation struct {
	Args RequestTestTMutationArgs `json:"args"`
}

type _RequestTestTMutation RequestTestTMutation

// NewRequestTestTMutation instantiates a new RequestTestTMutation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestTestTMutation(args RequestTestTMutationArgs) *RequestTestTMutation {
	this := RequestTestTMutation{}
	this.Args = args
	return &this
}

// NewRequestTestTMutationWithDefaults instantiates a new RequestTestTMutation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestTestTMutationWithDefaults() *RequestTestTMutation {
	this := RequestTestTMutation{}
	return &this
}

// GetArgs returns the Args field value
func (o *RequestTestTMutation) GetArgs() RequestTestTMutationArgs {
	if o == nil {
		var ret RequestTestTMutationArgs
		return ret
	}

	return o.Args
}

// GetArgsOk returns a tuple with the Args field value
// and a boolean to check if the value has been set.
func (o *RequestTestTMutation) GetArgsOk() (*RequestTestTMutationArgs, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Args, true
}

// SetArgs sets field value
func (o *RequestTestTMutation) SetArgs(v RequestTestTMutationArgs) {
	o.Args = v
}

func (o RequestTestTMutation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestTestTMutation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["args"] = o.Args
	return toSerialize, nil
}

func (o *RequestTestTMutation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"args",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRequestTestTMutation := _RequestTestTMutation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRequestTestTMutation)

	if err != nil {
		return err
	}

	*o = RequestTestTMutation(varRequestTestTMutation)

	return err
}

type NullableRequestTestTMutation struct {
	value *RequestTestTMutation
	isSet bool
}

func (v NullableRequestTestTMutation) Get() *RequestTestTMutation {
	return v.value
}

func (v *NullableRequestTestTMutation) Set(val *RequestTestTMutation) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestTestTMutation) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestTestTMutation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestTestTMutation(val *RequestTestTMutation) *NullableRequestTestTMutation {
	return &NullableRequestTestTMutation{value: val, isSet: true}
}

func (v NullableRequestTestTMutation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestTestTMutation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


